my API key: b57275ff4bf32e085ee9ffa1aa7e6bab

FIRST QUERY AND GET AN ARRAY OF POSSIBLE CUISINES FOR NASHVILLE
Curl: curl -X GET --header "Accept: application/json" --header "user-key: b57275ff4bf32e085ee9ffa1aa7e6bab" "https://developers.zomato.com/api/v2.1/cuisines?city_id=1138"
Request url: 
https://developers.zomato.com/api/v2.1/cuisines?city_id=1138


Full query for chinese cuisine_id = 25
Curl: - curl -X GET --header "Accept: application/json" --header "user-key: b57275ff4bf32e085ee9ffa1aa7e6bab" "https://developers.zomato.com/api/v2.1/search?entity_id=1138&entity_type=city&cuisines=25"
Request url: https://developers.zomato.com/api/v2.1/search?entity_id=1138&entity_type=city&cuisines=25

QUERY USING ENTITY TYPE - CITY AND CUISINE TYPE THAT RETURNS A RESTAURANT ????
"user-key": "b57275ff4bf32e085ee9ffa1aa7e6bab",
"entity_type": "city",
"entity_id": "1138", // (Nashville)
"cuisine_id": 25,

This search returns AN OBJECT where the fourth key is the
array "restaurants": [] with an object "restaurant" for each restaurant
within search parameters
On the first level of object restaurant are "name" and "location".
Under "location" is "address"

Results List = restaurants.restaurant.name + restaurants.restaurant.location.address

STRIPPED DOWN VERSION FOR CHINESE (25)

{
  "results_found": 143,
  "results_start": 0,
  "results_shown": 20,
  "restaurants": [
    {
      "restaurant": {
        "apikey": "b57275ff4bf32e085ee9ffa1aa7e6bab",
        "id": "17193705",
        "name": "P.F. Chang's",
        "url": "https://www.zomato.com/nashville/p-f-changs-franklin?utm_source=api_basic_user&utm_medium=api&utm_campaign=v2.1",
        "location": {
          "address": "439 Cool Springs Boulevard. 37067",
          "locality": "Franklin",
          "city": "Nashville",
          "city_id": 1138,
          "latitude": "35.9467222474",
          "longitude": "-86.8257665634",
          "zipcode": "37067",
          "country_id": 216,
          "locality_verbose": "Franklin, Nashville"
        },
        "cuisines": "Asian, Chinese, Vegetarian",        
      }
    },

******************************************************************

https://developers.zomato.com/api/v2.1/cities?q=%22Nashville%2C%20TN%22

INITIAL QUERY OF CITY ID - NASHVILLE  "id": 1138

  "location_suggestions": [
    {
      "id": 1138,
      "name": "Nashville, TN",
      "country_id": 216,
      "country_name": "United States",
      "country_flag_url": "https://b.zmtcdn.com/images/countries/flags/country_216.png",
      "should_experiment_with": 0,
      "discovery_enabled": 1,
      "has_new_ad_format": 0,
      "is_state": 0,
      "state_id": 110,
      "state_name": "Tennessee",
      "state_code": "TN"
    }

**********************************************************************

CUISINES

Get a list of all cuisines of restaurants listed in a city.
The location/city input can be provided in the following ways -
Using Zomato City ID
Using coordinates of any location within a city
List of all restaurants serving a particular cuisine can be obtained
using '/search' API with cuisine ID and location details

Response Class (Status 200)
ModelModel Schema
[
  {
    "cuisine_id": "25",
    "cuisine_name": "Chinese"
  }
]

https://developers.zomato.com/api/v2.1/cuisines?city_id=1138


  "cuisines": [
    {
      "cuisine": {
        "cuisine_id": 152,
        "cuisine_name": "African"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 1,
        "cuisine_name": "American"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 3,
        "cuisine_name": "Asian"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 193,
        "cuisine_name": "BBQ"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 5,
        "cuisine_name": "Bakery"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 227,
        "cuisine_name": "Bar Food"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 270,
        "cuisine_name": "Beverages"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 159,
        "cuisine_name": "Brazilian"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 182,
        "cuisine_name": "Breakfast"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 133,
        "cuisine_name": "British"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 247,
        "cuisine_name": "Bubble Tea"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 168,
        "cuisine_name": "Burger"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 30,
        "cuisine_name": "Cafe"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 491,
        "cuisine_name": "Cajun"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 956,
        "cuisine_name": "California"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 158,
        "cuisine_name": "Caribbean"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 25,
        "cuisine_name": "Chinese"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 161,
        "cuisine_name": "Coffee and Tea"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 287,
        "cuisine_name": "Colombian"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 928,
        "cuisine_name": "Creole"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 153,
        "cuisine_name": "Cuban"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 192,
        "cuisine_name": "Deli"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 100,
        "cuisine_name": "Desserts"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 411,
        "cuisine_name": "Dim Sum"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 541,
        "cuisine_name": "Diner"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 959,
        "cuisine_name": "Donuts"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 268,
        "cuisine_name": "Drinks Only"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 651,
        "cuisine_name": "Eastern European"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 149,
        "cuisine_name": "Ethiopian"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 38,
        "cuisine_name": "European"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 40,
        "cuisine_name": "Fast Food"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 318,
        "cuisine_name": "Fondue"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 45,
        "cuisine_name": "French"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 501,
        "cuisine_name": "Frozen Yogurt"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 274,
        "cuisine_name": "Fusion"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 134,
        "cuisine_name": "German"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 156,
        "cuisine_name": "Greek"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 521,
        "cuisine_name": "Hawaiian"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 143,
        "cuisine_name": "Healthy Food"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 233,
        "cuisine_name": "Ice Cream"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 148,
        "cuisine_name": "Indian"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 154,
        "cuisine_name": "International"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 55,
        "cuisine_name": "Italian"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 207,
        "cuisine_name": "Jamaican"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 60,
        "cuisine_name": "Japanese"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 164,
        "cuisine_name": "Juices"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 67,
        "cuisine_name": "Korean"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 136,
        "cuisine_name": "Latin American"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 70,
        "cuisine_name": "Mediterranean"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 73,
        "cuisine_name": "Mexican"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 137,
        "cuisine_name": "Middle Eastern"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 996,
        "cuisine_name": "New American"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 963,
        "cuisine_name": "Pacific Northwest"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 162,
        "cuisine_name": "Peruvian"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 82,
        "cuisine_name": "Pizza"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 983,
        "cuisine_name": "Pub Food"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 320,
        "cuisine_name": "Ramen"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 998,
        "cuisine_name": "Salad"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 601,
        "cuisine_name": "Salvadorean"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 304,
        "cuisine_name": "Sandwich"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 83,
        "cuisine_name": "Seafood"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 461,
        "cuisine_name": "Soul Food"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 972,
        "cuisine_name": "South American"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 471,
        "cuisine_name": "Southern"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 966,
        "cuisine_name": "Southwestern"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 89,
        "cuisine_name": "Spanish"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 141,
        "cuisine_name": "Steak"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 177,
        "cuisine_name": "Sushi"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 997,
        "cuisine_name": "Taco"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 179,
        "cuisine_name": "Tapas"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 163,
        "cuisine_name": "Tea"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 964,
        "cuisine_name": "Teriyaki"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 150,
        "cuisine_name": "Tex-Mex"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 95,
        "cuisine_name": "Thai"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 142,
        "cuisine_name": "Turkish"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 308,
        "cuisine_name": "Vegetarian"
      }
    },
    {
      "cuisine": {
        "cuisine_id": 99,
        "cuisine_name": "Vietnamese"
      }
    }
  ]
}
****************************************************************

QUERY USING ENTITY TYPE - CITY AND CUISINE TYPE THAT RETURNS A RESTAURANT ????
"user-key": "b57275ff4bf32e085ee9ffa1aa7e6bab",
"entity_type": "city",
"entity_id": "1138", // (Nashville)
"cuisine_id": 25,

This search returns AN OBJECT where the fourth key is the
array "restaurants": [] with an object for each restaurant
within search parameters

Results List = restaurants.restaurant.name + restaurants.restaurant.location

STRIPPED DOWN VERSION

{
  "results_found": 143,
  "results_start": 0,
  "results_shown": 20,
  "restaurants": [
    {
      "restaurant": {
        "apikey": "b57275ff4bf32e085ee9ffa1aa7e6bab",
        "id": "17193705",
        "name": "P.F. Chang's",
        "url": "https://www.zomato.com/nashville/p-f-changs-franklin?utm_source=api_basic_user&utm_medium=api&utm_campaign=v2.1",
        "location": {
          "address": "439 Cool Springs Boulevard. 37067",
          "locality": "Franklin",
          "city": "Nashville",
          "city_id": 1138,
          "latitude": "35.9467222474",
          "longitude": "-86.8257665634",
          "zipcode": "37067",
          "country_id": 216,
          "locality_verbose": "Franklin, Nashville"
        },
        "cuisines": "Asian, Chinese, Vegetarian",        
      }
    },

FULL RESPONSE BODY FOR FIRST TWO ITEMS

{
  "results_found": 143,
  "results_start": 0,
  "results_shown": 20,
  "restaurants": [
    {
      "restaurant": {
        "R": {
          "res_id": 17193705
        },
        "apikey": "b57275ff4bf32e085ee9ffa1aa7e6bab",
        "id": "17193705",
        "name": "P.F. Chang's",
        "url": "https://www.zomato.com/nashville/p-f-changs-franklin?utm_source=api_basic_user&utm_medium=api&utm_campaign=v2.1",
        "location": {
          "address": "439 Cool Springs Boulevard. 37067",
          "locality": "Franklin",
          "city": "Nashville",
          "city_id": 1138,
          "latitude": "35.9467222474",
          "longitude": "-86.8257665634",
          "zipcode": "37067",
          "country_id": 216,
          "locality_verbose": "Franklin, Nashville"
        },
        "switch_to_order_menu": 0,
        "cuisines": "Asian, Chinese, Vegetarian",
        "average_cost_for_two": 25,
        "price_range": 2,
        "currency": "$",
        "offers": [],
        "opentable_support": 0,
        "is_zomato_book_res": 0,
        "mezzo_provider": "OTHER",
        "is_book_form_web_view": 0,
        "book_form_web_view_url": "",
        "book_again_url": "",
        "thumb": "",
        "user_rating": {
          "aggregate_rating": "4.1",
          "rating_text": "Very Good",
          "rating_color": "5BA829",
          "votes": "192"
        },
        "photos_url": "https://www.zomato.com/nashville/p-f-changs-franklin/photos?utm_source=api_basic_user&utm_medium=api&utm_campaign=v2.1#tabtop",
        "menu_url": "https://www.zomato.com/nashville/p-f-changs-franklin/menu?utm_source=api_basic_user&utm_medium=api&utm_campaign=v2.1&openSwipeBox=menu&showMinimal=1#tabtop",
        "featured_image": "",
        "has_online_delivery": 0,
        "is_delivering_now": 0,
        "include_bogo_offers": true,
        "deeplink": "zomato://restaurant/17193705",
        "is_table_reservation_supported": 0,
        "has_table_booking": 0,
        "events_url": "https://www.zomato.com/nashville/p-f-changs-franklin/events#tabtop?utm_source=api_basic_user&utm_medium=api&utm_campaign=v2.1",
        "establishment_types": []
      }
    },
    {
      "restaurant": {
        "R": {
          "res_id": 17192075
        },
        "apikey": "b57275ff4bf32e085ee9ffa1aa7e6bab",
        "id": "17192075",
        "name": "Chinatown",
        "url": "https://www.zomato.com/nashville/chinatown-nashville?utm_source=api_basic_user&utm_medium=api&utm_campaign=v2.1",
        "location": {
          "address": "3900 Hillsboro Pike, Nashville 37215",
          "locality": "Green Hills",
          "city": "Nashville",
          "city_id": 1138,
          "latitude": "36.1059830000",
          "longitude": "-86.8135740000",
          "zipcode": "37215",
          "country_id": 216,
          "locality_verbose": "Green Hills, Nashville"
        },
        "switch_to_order_menu": 0,
        "cuisines": "Asian, Chinese",
        "average_cost_for_two": 10,
        "price_range": 1,
        "currency": "$",
        "offers": [],
        "opentable_support": 0,
        "is_zomato_book_res": 0,
        "mezzo_provider": "OTHER",
        "is_book_form_web_view": 0,
        "book_form_web_view_url": "",
        "book_again_url": "",
        "thumb": "",
        "user_rating": {
          "aggregate_rating": "4.3",
          "rating_text": "Very Good",
          "rating_color": "5BA829",
          "votes": "100"
        },
        "photos_url": "https://www.zomato.com/nashville/chinatown-nashville/photos?utm_source=api_basic_user&utm_medium=api&utm_campaign=v2.1#tabtop",
        "menu_url": "https://www.zomato.com/nashville/chinatown-nashville/menu?utm_source=api_basic_user&utm_medium=api&utm_campaign=v2.1&openSwipeBox=menu&showMinimal=1#tabtop",
        "featured_image": "",
        "has_online_delivery": 0,
        "is_delivering_now": 0,
        "include_bogo_offers": true,
        "deeplink": "zomato://restaurant/17192075",
        "is_table_reservation_supported": 0,
        "has_table_booking": 0,
        "events_url": "https://www.zomato.com/nashville/chinatown-nashville/events#tabtop?utm_source=api_basic_user&utm_medium=api&utm_campaign=v2.1",
        "establishment_types": []
      }
    },

FROM GITHUB BOGAS04/ZOM/INDEX.JS

#!/usr/bin/env node

const fetch = require('node-fetch');

const key = '17c5c4c6e845e73f4296fa83b502b87c';

const fetchMeta = {
  method: 'get',
  headers: { 'user-key': key, 'Accept': 'application/json', },
}

if (process.argv.length === 2) {
  console.log('Usage: zom <keyword>[@<location>]');
  return;
}

const [
  keyword = 'Big Yellow Door',
  location = 'New Delhi',   // need to get a better default
] = process.argv
    .splice(2)              // get rid of ['node', 'file.js']
    .join(' ')              // join them with space
    .split('@')             // split them at @
    .map(e => e.trim())     // trim
;

const extractLocationData = e => Promise.resolve(e.location_suggestions[0] || { entity_id: 1, entity_type: 'city' });

const extractRestaurants = e => Promise.resolve(e.restaurants.map(e => e.restaurant));

const printRestaurants = r => r.map(e => console.log(e));

const stars = rating => "⭐️ ".repeat(parseInt(rating));

const makeHumanReadable = restaurants => Promise.resolve(
    restaurants.map(e => (
    `${e.name} (${e.user_rating && (stars(e.user_rating.aggregate_rating) + " " + (e.user_rating.aggregate_rating) + " " + e.user_rating.rating_text)})
    🕸  ${e.url}
    🗺A ${e.location.address}
    🍕  ${e.cuisines}
    💸  ${e.currency} ${e.average_cost_for_two} for 2
    `))
);

const getLocationInfo = location => fetch(`https://developers.zomato.com/api/v2.1/locations?query=${location}`, fetchMeta);

const getRestaurantsInfo = ({ entity_id, entity_type }) => fetch(`https://developers.zomato.com/api/v2.1/search?entity_id=${entity_id}&entity_type=${entity_type}&q=${keyword}`, fetchMeta);

getLocationInfo(location)
.then(e => e.json())
.then(extractLocationData)
.then(locationData => getRestaurantsInfo(locationData))
.then(e => e.json())
.then(extractRestaurants)
.then(makeHumanReadable)
.then(printRestaurants)
.catch(e => console.log(e));